#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('my-express:server');
var http = require('http');
// 自己添加的
var consola = require('consola');
const path = require('path');
const os = require('os');
const localHost = getLocalIps()[0];

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '11111');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
consola.success(' Your application is running here:http://' + localHost + ':' + port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 *获取本地IP
 *
 * @param {boolean}  是否显示ipb6
 * @returns {object} 包含Ip的数组
 *
 * console.log('本机ip地址(不包括Ipv6):', getLocalIps());
 * console.log('本机ip地址(包括Ipv6):', getLocalIps(true));
 *
 */
function getLocalIps(flagIpv6) {
  var ifaces = os.networkInterfaces();
  var ips = [];
  var func = function(details) {
      if (!flagIpv6 && details.family === 'IPv6') {
          return;
      }
      ips.push(details.address);
  };
  for (var dev in ifaces) {
      ifaces[dev].forEach(func);
  }
  return ips;
}
